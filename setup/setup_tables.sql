/* Cleanup */
/*
drop table user_room_access;
drop table room_inventory;
drop table deathstar_rooms;
drop table imperial_secrets;
drop table user_roles;
drop table roles;
drop table users;
*/

/* Create tables necessary for the demos */
create table imperial_secrets (
  id integer generated by default on null as identity primary key,
  secret varchar2(4000) not null
);

insert into imperial_secrets ( secret ) values ('Vader is Lukes father');

create table deathstar_rooms (
  id integer generated by default on null as identity primary key,
  name varchar2(200) not null,
  code varchar2(200) not null unique
);

insert into deathstar_rooms (id, name, code ) values (1, 'Engine Room 1', 'ENG1' );
insert into deathstar_rooms (id, name, code ) values (2, 'Vaders Chamber', 'VADER' );
insert into deathstar_rooms (id, name, code ) values (3, 'Bridge', 'BRIDGE' );
insert into deathstar_rooms (id, name, code ) values (4, 'Prison 1', 'PRISON1' );

/*create table room_inventory (
  id integer generated by default on null as identity primary key,
	room_id integer not null,
	item varchar2(400) not null,
	constraint room_inventory_fk_room foreign key ( room_id )
    references deathstar_rooms (id)
);

insert into room_inventory (room_id, item) values ( 1, 'Laser-Wrench');
insert into room_inventory (room_id, item) values ( 1, 'Sandwich (half eaten)');
insert into room_inventory (room_id, item) values ( 2, 'Lightsaber (red)');
commit;
*/
create table users
(
	id        integer,
	user_name varchar2(30 char)
);

insert into users values (1, 'Dark Admin');
insert into users values (2, 'Trainee Sam');
insert into users values (3, 'Editor JarJar');

create table roles
(
	id        integer,
	role_name varchar2(30 char)
);

insert into roles values (1, 'ADMIN');
insert into roles values (2, 'READ');
insert into roles values (3, 'WRITE');

create table user_roles
(
	id_user integer,
	id_role integer
);

insert into user_roles values (1, 1);
insert into user_roles values (2, 2);
insert into user_roles values (3, 3);

create table user_room_access (
  id_user integer not null,
  id_room integer not null,
  constraint user_room_access_pk primary key ( id_user, id_room )
);

create table log_messages (
  message varchar2(4000),
  created timestamp default current_timestamp
);

commit;


-- Grants
grant execute on room_info to public;